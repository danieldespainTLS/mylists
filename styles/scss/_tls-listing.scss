/* Table styles */

@import 'tls-colors';

$borderWidth	: 1px;
$hPadding		: ($pxGutter / 2);
$vPadding		: ($pxGutter / 4);

// header rows colors
$thead_BG			: $lightBlue-2;

// footer rows colors
$tfoot_BG			: $lightBlue;

// notes rows colors
$notes_BG			: $lightBlue5;
$notes_BG_hover		: $frostOverlay;
$notes_color		: $darkBlueTransition3;
$notes_color_hover	: $darkBlueTransition1;
$notes_border		: $blue;

// zebra stripes
$zebra_dark				: $zebraStripeOdd;
$zebra_light			: $zebraStripeEven;
$zebra_hover			: $rowHighlight;

$zebra_over_dark		: #ddd4ff; // violet
$zebra_over_light		: #e7e0ff;
$zebra_over_hover		: #b9a6ff;
$zebra_over_border		: #c3b2ff;
$zebra_over_color		: #0b0033;

$zebra_yes_dark			: #b4f0b8; // green
$zebra_yes_light		: #cffad2;
$zebra_yes_hover		: #7fd485;
$zebra_yes_border		: #a1e6a5;
$zebra_yes_color		: #003303;

$zebra_partial_dark		: #fce165; // amber
$zebra_partial_light	: #fff066;
$zebra_partial_hover	: #ffc44d;
$zebra_partial_border	: #f2d349;
$zebra_partial_color	: #332200;

$zebra_no_dark			: #ffd6e4; // pink
$zebra_no_light			: #ffe8f0;
$zebra_no_hover			: #ffa6c4;
$zebra_no_border		: #ffc4d8;
$zebra_no_color			: #330012;

$zebra_paused_dark		: #bdeeff; // ice blue
$zebra_paused_light		: #d9f3ff;
$zebra_paused_hover		: #66c8ff;
$zebra_paused_border	: #73bde5;
$zebra_paused_color		: #0072b2;


// faux groups: like a table-within-a-table
// header rows  (within tbody)
// header cells (within tr)
$bodyGroupHead_BG		: $lightBlue-1; // heading ROWS in <tr class='bodyGroupHead'>...</tr>
$bodyGroupHead_border	: $blue;
$bodyGroupFoot_BG		: $lightBlue5; // footer ROWS in <tr class='bodyGroupFoot'>...</tr>
$bodyGroupFoot_border	: $darkBlue5;

$zebra_rhead_dark		: $lightBlue2; // heading CELLS in <tr><th>...</th><td>...</td>
$zebra_rhead_light		: $lightBlue3;
$zebra_rhead_hover		: $lightBlue-1;
$zebra_rhead_borderT	: $lightBlue2;
$zebra_rhead_borderR	: $lightBlue1;

$zebra_rfoot_dark		: $lightBlue3; // footer CELLS in ...<td class='rfoot'>...</td></tr>
$zebra_rfoot_light		: $lightBlue5;
$zebra_rfoot_hover		: $lightBlue-1;
$zebra_rfoot_border		: $lightBlue3;


/* border colors */
$border_outer			: $darkBlue-2;
$border_outer_thead		: $darkBlueTransition2;
$border_outer_tfoot		: $darkBlueTransition2;
$border_inner_thead		: $darkBlueTransition3;
$border_inner_tbody		: $lightBlue-2;
$border_inner_tfoot		: $darkBlueTransition3;


table.listing {
	width: auto;
	border: $borderWidth solid $border_outer; // outside border
	border-collapse: collapse;
	text-align: left;
	
	tr {
		border-top:   $borderWidth solid $border_inner_tbody; // border between rows
		border-left:  $borderWidth solid $border_outer; // outside border
		border-right: $borderWidth solid $border_outer; // outside border
	}
	
	td, 
	th {
		font-family: $monaco;
        font-size: 8pt;
        line-height: normal;
		border: none;
		padding: $vPadding;
		padding-right: $hPadding;
		vertical-align: middle;
		empty-cells: show;
	}
	
	.hint {
		font-size: 6pt;
	}
	

	// header row(s)
	// use <thead> to group <tr><th>...</th></tr> and to get visual line at bottom of header row(s)
	thead, 
	thead tr, 
	thead tr th {
		background-color: $thead_BG; // thead background color
		font-weight: bold;
	}
	thead {
		border-bottom: ($borderWidth * 2) solid $border_outer_thead;
        
        // header row sticks as page is scrolled
        // apply class to <thead class='sticky'> but it's the <th> that actually sticks
        &.sticky {
            th {
                position: -webkit-sticky;
                position: sticky;
                top: 0;
            }
        }
		
		tr {
			border-top:    $borderWidth solid $border_inner_thead; // in-between head tr's border
			
			
			&:first-of-type {
				border-top: 0px solid transparent;
			}
		}
		th {
			padding-top: $vPadding;
			padding-bottom: $vPadding;
		
			a {
				color: black;
				text-decoration: none;
			}
			// hover only on screen
		}
		
		// classes to add cell borders on top, left, right, or both (use class='borderLeft borderRight' for both)
		// lowercase because webKit bug classList.remove() doesn't work with mixed/uppercase letters == .noBorderTop won't work
		.borderLeft, 
		&.grid .borderLeft {
			border-left: $borderWidth solid $border_inner_thead; // border between columns
		}
		.borderRight, 
		&.grid .borderRight {
			border-right: $borderWidth solid $border_inner_thead; // border between columns
		}
	}
	

	// body row(s)
	tbody {
		tr:first-of-type {
			border-top: 0px solid transparent;
		}
		td {
			background-color: transparent;
		}
		td a {
			text-decoration: none;
		}
		
		// Zebra striping & row highlighting
		// ONLY in tbody
		// Could also be tr:nth-child(4n+1) == every fourth row, starting at row 1
		tr {
			// default normal zebra stripes
			&:nth-of-type(odd) {
				background-color: $zebra_dark; // zebra stripe : odd (darker)
			}
			&:nth-of-type(even) {
				background-color: $zebra_light; // zebra stripe : even (lighter)
			}
			
			// header cells <th> within tbody are also shaded
			// like <thead> but within a single table row
			th, 
			.rhead {
				border-top: $borderWidth solid $zebra_rhead_borderT; // needs a slightly darker border than normal cells
				border-top: none;
			}
			&:first-of-type th, 
			&:first-of-type .rhead {
				// border-top: 0px solid transparent; BUT NOT the first row
				border-top: 1px solid $border_inner_thead;
			}
			
			&:nth-of-type(odd) th, 
			&:nth-of-type(odd) .rhead {
				background-color: $zebra_rhead_dark; // row heading <th> zebra stripe : odd (darker)
				border-right-color: $zebra_rhead_borderR;
			}
			&:nth-of-type(even) th, 
			&:nth-of-type(even) .rhead {
				background-color: $zebra_rhead_light; // row heading <th> zebra stripe : even (lighter)
				border-right-color: $zebra_rhead_borderR;
			}
			
			// footer cells <td class='rfoot'> within body are also shaded
			// like <tfoot> but within a single table row
			.rfoot {
				border-left: $borderWidth solid $zebra_rfoot_border; // needs a slightly darker border than normal cells
			}
			
			&:nth-of-type(odd) .rfoot {
				background-color: $zebra_rfoot_dark; // row foot <td class='rfoot'> zebra stripe : odd (darker)
			}
			&:nth-of-type(even) .rfoot {
				background-color: $zebra_rfoot_light; // row foot <td class='rfoot'> zebra stripe : even (lighter)
			}
			
			/* 
			'faux' head and foot rows within <tbody> can give visual clues to tbody groups
			apply class to <tr class='bodyGroupHead'>
					example: 
						INVOICE TABLE
							thead for column headings
							tbody(s) for each school
								faux header row with school's name
								rows of invoices
								faux footer row with school's subtotal
							tfoot for GRAND TOTAL 
			*/
			&.bodyGroupHead, 
			&:hover.bodyGroupHead {
				background-color: $bodyGroupHead_BG !important; // important prevents hover
				border-bottom: $borderWidth solid $bodyGroupHead_border !important;
				
				.rfoot {
					background-color: $lightBlue3 !important;
				}
			}
			
			&.bodyGroupFoot, 
			&:hover.bodyGroupFoot {
				background-color: $bodyGroupFoot_BG !important; // important prevents hover
				border-top: $borderWidth solid $bodyGroupFoot_border;
				
				th {
					background-color: $lightBlue3 !important;
					border-top-color: $lightBlue-2;
				}
				
				.rfoot {
					background-color: $lightBlue4 !important;
					border-top-color: $lightBlue2;
				}
			}
			
			
			// notes
			&.notes {
				background-color: $notes_BG !important;
				border-top: $borderWidth solid $notes_border; /* same as tbody border */
				color: $notes_color;
				
				td {
					font-weight: normal;
					font-style: italic;
				}
			}
			
			
			// over rows zebra stripes = line qty more than expected
			&.overRow:nth-of-type(odd) {
				background-color: $zebra_over_dark; // zebra stripe : odd (darker)
				border-top-color: $zebra_over_border;
				color: $zebra_over_color;
			}
			&.overRow:nth-of-type(even) {
				background-color: $zebra_over_light; // zebra stripe : even (lighter)
				border-top-color: $zebra_over_border;
				color: $zebra_over_color;
			}
			
			
			// yes rows zebra stripes = line complete/done/shipped
			&.yesRow:nth-of-type(odd) {
				background-color: $zebra_yes_dark; // zebra stripe : odd (darker)
				border-top-color: $zebra_yes_border;
				color: $zebra_yes_color;
			}
			&.yesRow:nth-of-type(even) {
				background-color: $zebra_yes_light; // zebra stripe : even (lighter)
				border-top-color: $zebra_yes_border;
				color: $zebra_yes_color;
			}
			
			
			// partial rows zebra stripes = line incomplete
			&.partialRow:nth-of-type(odd) {
				background-color: $zebra_partial_dark; // zebra stripe : odd (darker)
				border-top-color: $zebra_partial_border;
				color: $zebra_partial_color;
			}
			&.partialRow:nth-of-type(even) {
				background-color: $zebra_partial_light; // zebra stripe : even (lighter)
				border-top-color: $zebra_partial_border;
				color: $zebra_partial_color;
			}
			
			
			// no rows zebra stripes = line unfinished/backordered/cancelled
			&.noRow:nth-of-type(odd) {
				background-color: $zebra_no_dark; // zebra stripe : odd (darker)
				border-top-color: $zebra_no_border;
				color: $zebra_no_color;
			}
			&.noRow:nth-of-type(even) {
				background-color: $zebra_no_light; // zebra stripe : even (lighter)
				border-top-color: $zebra_no_border;
				color: $zebra_no_color;
			}
			
			
			// paused rows zebra stripes = line paused (in limbo)
			&.pausedRow:nth-of-type(odd) {
				background-color: $zebra_paused_dark; // zebra stripe : odd (darker)
				border-top-color: $zebra_paused_border;
				color: $zebra_paused_color;
			}
			&.pausedRow:nth-of-type(even) {
				background-color: $zebra_paused_light; // zebra stripe : even (lighter)
				border-top-color: $zebra_paused_border;
				color: $zebra_paused_color;
			}
			
			
			&.voidRow {
				color: $greyText !important;
				text-decoration: line-through;
				
				td {
					opacity: .4;
				}
			}
			
			
			
			// classes to add cell borders on top, left, right, or both (use class='borderLeft borderRight' for both)
			// lowercase because webKit bug classList.remove() doesn't work with mixed/uppercase letters == .noBorderTop won't work
			.borderLeft, 
			&.grid .borderLeft {
				border-left: $borderWidth solid $border_inner_tbody; // border between columns
			}
			.borderRight, 
			&.grid .borderRight {
				border-right: $borderWidth solid $border_inner_tbody; // border between columns
			}
		}

		td {
			&.noCell {
				background-color: $zebra_no_dark;
			}
			&.yesCell {
				background-color: $zebra_yes_light;
			}
		}
		
		// Darker line between multiple tbody 'sections' within one table
		&:nth-of-type(n+2) tr:first-of-type td {
			border-top: $borderWidth solid $border_inner_thead; // border between multiple tbody sections
		}
	}
	
	
	
	// footer row(s)
	// use <tfoot> to group <tr><th>...</th></tr> and to get visual line at top of summary row(s)
	tfoot {
		background-color: $tfoot_BG; // tfoot background color
		border-top: $borderWidth solid $border_outer_tfoot; // tfoot top border
		
		tr {
			background-color: $tfoot_BG; // tfoot background color
			border-top: $borderWidth solid $border_inner_tfoot; // in-between foot tr's border
			
			&:first-of-type {
				border-top: 0px solid transparent;
			}
			
			td {
				padding-right: $hPadding;
				font-weight: bold;
			}
			
			// classes to add cell borders on top, left, right, or both (use class='borderLeft borderRight' for both)
			// lowercase because webKit bug classList.remove() doesn't work with mixed/uppercase letters == .noBorderTop won't work
			.borderLeft, 
			&.grid td.borderLeft {
				border-left: $borderWidth solid $border_inner_tfoot; // border between columns
			}
			.borderRight, 
			&.grid td.borderRight {
				border-right: $borderWidth solid $border_inner_tfoot; // border between columns
			}
		}
	}
	
	
	
	// grid class has borders on all sides
	&.grid {
		thead th {
			border-right: $borderWidth solid $border_inner_thead; // in-between head tr's border
			
			&:last-of-type {
				border-right: 0px solid transparent; // except last head column
			}
		}
		
		tbody td {
			border-right: $borderWidth solid $border_inner_tbody; // border between body columns
			
			&:last-of-type {
				border-right: 0px solid transparent; // except last body column
			}
		}
		
		tfoot td {
			border-right: $borderWidth solid $border_inner_tfoot; // border between foot columns
			
			&:last-of-type {
				border-right: 0px solid transparent; // except last foot column
			}
		}
	}
	
	
	
	// regular rows
	tr {
		&>td:first-of-type, 
		&>th:first-of-type {
			padding-left: ($hPadding / 2);
		}
		
		&>td:last-of-type, 
		&>th:last-of-type {
			padding-right: $hPadding;
			border-right: $borderWidth solid $border_outer; // outer right side border
		}
		
		&:last-of-type td {
			border-bottom: 0px solid transparent; // allow table border to show through at bottom of table
		}
	}
	
	
	
	// left, center, right alignment cells
	.tdl, 
	.thl {
		text-align: left;
		padding-right: $hPadding;
	}
	
	.tdr, 
	.thr {
		text-align: right;
		padding-right: $hPadding;
	}
	
	.tdc, 
	.thc {
		text-align: center;
	}
	
	
	
	// wideGutter tables have more padding between columns
	&.wideGutter {
		th, 
		td {
			padding-right: ($hPadding * 4);
		}
		.thl, 
		.tdl {
			padding-right: ($hPadding * 4);
		}
		.thc, 
		.tdc {
			padding-left: ($hPadding * 2);
			padding-right: ($hPadding * 2);
		}
		.thr, 
		.tdr {
			padding-left: ($hPadding * 4);
			padding-right: $hPadding;
		}
	}
	// disable wideGutter on specific cells by adding class noGutter
	th.noGutter, 
	td.noGutter {
		padding-right: ($hPadding) !important;
	}
	.thl.noGutter, 
	.tdl.noGutter {
		padding-right: ($hPadding);
	}
	.thc.noGutter, 
	.tdc.noGutter {
		padding-left: ($hPadding);
		padding-right: ($hPadding);
	}
	.thr.noGutter, 
	.tdr.noGutter {
		padding-left: ($hPadding) !important;
		padding-right: $hPadding !important;
	}
	
	
	
	// class='padded' can be applied to individual cells or an entire row
	.padded, 
	.padded th, 
	.padded td {
		padding-top: .5em;
		padding-bottom: .5em;
	}
	
	
	
	// classes to remove cell borders on top, left, right, or both (use class='borderLeft borderRight' for both)
	// lowercase because webKit bug classList.remove() doesn't work with mixed/uppercase letters == .noBorderTop won't work
	.noborderleft, 
	.noBorderLeft, 
	&.grid .noBorderLeft {
		border-left: 0px solid transparent;
	}
	.noborderright, 
	.noBorderRight, 
	&.grid .noBorderRight {
		border-right: 0px solid transparent;
	}
	.nobordertop, 
	.noBorderTop {
		border-top: 0px solid transparent !important;
	}

	p {
		margin-bottom: ($gutter / 2);
	}

	&.noMargin {
		margin: 0;
	}
	&.noMarginTop {
		margin-top: 0;
	}
	&.noMarginBottom {
		margin-bottom: 0;
	}
}



// Vertical cell alignment
.top,		table.listing td.top,		table.listing th.top	{ vertical-align: top;}
.middle,	table.listing td.middle,	table.listing th.middle	{ vertical-align: middle;}
.bottom,	table.listing td.bottom,	table.listing th.bottom	{ vertical-align: bottom;}



@media screen {
	table.listing {
		// head does not change on hover, but links become visible on hover
		th a:hover, 
		td a:hover {
			text-decoration: underline;
		}
		th a:hover {
			color: $lightBlue;

			&.hiddenLink {
				color: inherit;
			}
		}
		
		tbody {
			&:hover td[rowspan], 
			tr:nth-of-type(odd):hover, 
			tr:nth-of-type(even):hover {
				background-color: $zebra_hover; // zebra stripe : hover
			}
			// .disableHighlight to prevent row highlighting (applied to <tr>)
			tr:nth-of-type(odd).disableHighlight:hover {
				background-color: $zebra_dark; // ignore zebra stripe hover : odd
			}
			tr:nth-of-type(even).disableHighlight:hover {
				background-color: $zebra_light; // ignore zebra stripe hover : even
			}
			
			// only hover rows' th cells on screen (not in print)
			tr {
				&:hover {
					background-color: $zebra_hover;
					
					th,
					.rhead {
						background-color: $zebra_rhead_hover !important;
					}
					.rfoot {
						background-color: $zebra_rfoot_hover !important;
					}
				}
				
				&.notes:hover {
					background-color: $notes_BG_hover !important;
					color: $notes_color_hover;
				}
				&.notes.disableHighlight:hover {
					background-color: $notes_BG !important;
				}
				
				&.overRow:hover {
					background-color: $zebra_over_hover !important;
				}
				&.yesRow:hover {
					background-color: $zebra_yes_hover !important;
				}
				&.partialRow:hover {
					background-color: $zebra_partial_hover !important;
				}
				&.noRow:hover {
					background-color: $zebra_no_hover !important;
				}
				
				// manually disable highlights for a row
				&.disableHighlight:hover {
					&:nth-of-type(odd){
						background-color: $zebra_dark !important;
						th {
							background-color: $zebra_rhead_dark !important;
						}
						.rfoot {
							background-color: $zebra_rfoot_dark !important;
						}
					}
					&:nth-of-type(even){
						background-color: $zebra_light !important;
						th {
							background-color: $zebra_rhead_light !important;
						}
						.rfoot {
							background-color: $zebra_rfoot_light !important;
						}
					}
					&.notes {
						background-color: $notes_BG !important;
					}
				}
			}
		}
		
		// + - links (example: f3.php) are too close without this extra spacing
		.changeLink {
			margin-right: ($pxGutter / 4);
		}
	}
}



@media print {
	table.listing {
		tbody {
			tr {
				// all zebra stripe rows print in black
				&.overRow:nth-of-type(odd), 
				&.overRow:nth-of-type(even), 
				&.yesRow:nth-of-type(odd), 
				&.yesRow:nth-of-type(even), 
				&.partialRow:nth-of-type(odd), 
				&.partialRow:nth-of-type(even), 
				&.noRow:nth-of-type(odd), 
				&.noRow:nth-of-type(even) {
					color: black;
				}
				&.voidRow {
					color: $greyTextPrint !important;
				}
				
				&.notes {
					color: $notes_color_hover;
					background-color: $notes_BG_hover;
				}
			}
		}
	}
}
