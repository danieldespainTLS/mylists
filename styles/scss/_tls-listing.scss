/* Table styles */

@import 'tls-colors';

$borderWidth		: 1px;
$hPadding			: ($pxGutter / 2);
$vPadding			: ($pxGutter / 4);

/* border colors */
$border_outer			: $darkBlue4;
$border_outer_thead		: $darkBlueTransition2;
$border_outer_tfoot		: $darkBlueTransition2;
$border_inner_thead		: $darkBlueTransition3;
$border_inner_tfoot		: $blue5; //$darkBlueTransition3;

// header rows colors
$thead_BG			: $lightBlue-2;

// footer rows colors
$tfoot_BG			: $lightBlue;

// notes rows colors
$notes_BG			: $lightBlue5;
$notes_BG_hover		: $frostOverlay;
$notes_color		: $darkBlueTransition3;
$notes_color_hover	: $darkBlueTransition1;
$notes_border		: $blue5;

// zebra stripes
$zebra_dark							: $zebraStripeOdd;
$zebra_light						: $zebraStripeEven;
$zebra_hover						: $rowHighlight;
$zebra_headDark						: $lightBlue2;
$zebra_headLight					: $lightBlue3;
$zebra_headHover					: $rowHighlightHead;
$zebra_footDark						: $lightBlue3;
$zebra_footLight					: $lightBlue5;
$zebra_footHover					: $rowHighlightFoot;
$zebra_rowsBorderColor				: $lightBlue-2;
$zebra_columnsBorderColor			: $lightBlue;

$zebra_yes_color					: #003303; // green
$zebra_yes_dark						: #b4f0b8;
$zebra_yes_light					: #cffad2;
$zebra_yes_hover					: #7fd485;
$zebra_yes_headDark					: #9de6a2;
$zebra_yes_headLight				: #b5efb9;
$zebra_yes_headHover				: #6fcb75;
$zebra_yes_footDark					: #a9ebad;
$zebra_yes_footLight				: #c2f5c6;
$zebra_yes_footHover				: #77d07d;
$zebra_yes_rowsBorderColor			: #a1e6a5;
$zebra_yes_columnsBorderColor		: #a1e6a5;

$zebra_no_color						: #330012; // pink
$zebra_no_dark						: #ffd6e4;
$zebra_no_light						: #ffe8f0;
$zebra_no_hover						: #ffa6c4;
$zebra_no_headDark					: #ffc3d7;
$zebra_no_headLight					: #ffd4e2;
$zebra_no_headHover					: #ff97b9;
$zebra_no_footDark					: #ffcdde;
$zebra_no_footLight					: #ffdee9;
$zebra_no_footHover					: #ff9fbf;
$zebra_no_rowsBorderColor			: #ffc4d8;
$zebra_no_columnsBorderColor		: #ffc4d8;

$zebra_alert_color					: #332200; // amber
$zebra_alert_dark					: #fce165;
$zebra_alert_light					: #fff066;
$zebra_alert_hover					: #fabc40;
$zebra_alert_headDark				: #facf4e;
$zebra_alert_headLight				: #fddd4f;
$zebra_alert_headHover				: #f8ad32;
$zebra_alert_footDark				: #fbd85a;
$zebra_alert_footLight				: #fee75b;
$zebra_alert_footHover				: #f9b539;
$zebra_alert_rowsBorderColor		: #f2d349;
$zebra_alert_columnsBorderColor		: #f2d349;

$zebra_observe_color				: #0b0033; // violet
$zebra_observe_dark					: #ddd4ff;
$zebra_observe_light				: #e7e0ff;
$zebra_observe_hover				: #b9a6ff;
$zebra_observe_headDark				: #cbbeff;
$zebra_observe_headLight			: #d4c8ff;
$zebra_observe_headHover			: #aa94ff;
$zebra_observe_footDark				: #d4c9ff;
$zebra_observe_footLight			: #ded4ff;
$zebra_observe_footHover			: #b19dff;
$zebra_observe_rowsBorderColor		: #c3b2ff;
$zebra_observe_columnsBorderColor	: #c3b2ff;

$zebra_void_color					: $greyText; // grey (void)
$zebra_void_colorHover				: $grey-1;
$zebra_void_hover					: $grey5;
$zebra_void_headHover				: darken($grey5, 8%); // $grey3 was too dark
$zebra_void_footHover				: darken($grey5, 4%); // $grey4 was too dark

$zebra_paused_color					: #0072b2; // ice blue
$zebra_paused_dark					: #bdeeff;
$zebra_paused_light					: #d9f3ff;
$zebra_paused_hover					: #66c8ff;
$zebra_paused_border				: #73bde5;

// faux groups: like a table-within-a-table
// header rows  (within tbody)
// header cells (within tr)
$bodyGroupHead_BG		: $lightBlue-1; // heading ROWS in <tr class='bodyGroupHead'>...</tr>
$bodyGroupHeadHead_BG	: $lightBlue-2; // <th> or .rhead within .bodyGroupHead
$bodyGroupHeadFoot_BG	: $lightBlue-2; // .rfoot within .bodyGroupHead
$bodyGroupHead_border	: $blue3;
$bodyGroupFoot_BG		: $lightBlue4; // footer ROWS in <tr class='bodyGroupFoot'>...</tr>
$bodyGroupFootHead_BG	: $lightBlue2; // <th> or .rhead within .bodyGroupFoot
$bodyGroupFootFoot_BG	: $lightBlue3; // .rfoot within .bodyGroupFoot
$bodyGroupFoot_border	: $blue3;


table.listing {
	// custom properties for zebra striping are scoped to table.listing
	--zebraColor: $black; // text color
	--zebraDark: #{$zebra_dark};
	--zebraLight: #{$zebra_light};
	--zebraHover: #{$zebra_hover};
	// th, .rhead (rows; not table header)
	--zebraHeadDark: #{$zebra_headDark};
	--zebraHeadLight: #{$zebra_headLight};
	--zebraHeadHover: #{$zebra_headHover};
	// .rfoot (rows; not table footer) -- not quite as darkened as rhead
	--zebraFootDark: #{$zebra_footDark};
	--zebraFootLight: #{$zebra_footLight};
	--zebraFootHover: #{$zebra_footHover};
	// borders within <tbody>
	--zebraRowsBorderColor: #{$zebra_rowsBorderColor}; //#{$purple2};
	--zebraColumnsBorderColor: #{$zebra_columnsBorderColor}; //#{$hotPurple};

	width: auto;
	background-color: $white;
	border: $borderWidth solid $border_outer; // outside border
	border-collapse: collapse;
	border-spacing: 0; // equivalent of deprecated cellspacing
	text-align: left;
	
	tr {
		border-width: $borderWidth;
		border-style: solid;
	}
	
	td, 
	th {
		font-family: $monaco;
        font-size: 8pt;
        line-height: normal;
		border: none;
		border-width: 0;
		border-style: solid;
		padding: $vPadding;
		padding-right: $hPadding;
		vertical-align: middle;
		empty-cells: show;
	}
	
	.hint {
		font-size: 6pt;
	}

	// table header row(s)
	// use <thead> to group <tr><th>...</th></tr> and to get visual line at bottom of header row(s)
	thead {
		background-color: $thead_BG;
		font-weight: bold;
		border-bottom: ($borderWidth * 2) solid $border_outer_thead;
        
        // header row sticks as page is scrolled
        // apply class to <thead class='sticky'> but it's the <th> that actually sticks
        &.sticky {
            th {
				background-color: $thead_BG;
                position: -webkit-sticky;
                position: sticky;
                top: 0;
				opacity: 100% !important;
            }
        }
		
		tr {
			border-color: $border_inner_thead;
			border-left-color: $border_outer;
			border-right-color: $border_outer;
			
			td, 
			th {
				border-color: $border_inner_thead;
				padding-top: $vPadding;
				padding-bottom: $vPadding;
			}

			&:first-of-type {
				border-top: 0px solid transparent;
			}
		}
	}
	

	// table body row(s)
	tbody {
		// Zebra striping & row highlighting
		// ONLY in tbody
		tr {
			/* adjust custom properties according to color-coding choice */
			&.yesRow, 
			td.yesCell {
				--zebraColor: #{$zebra_yes_color};
				--zebraDark: #{$zebra_yes_dark};
				--zebraLight: #{$zebra_yes_light};
				--zebraHover: #{$zebra_yes_hover};
				--zebraHeadDark: #{$zebra_yes_headDark};
				--zebraHeadLight: #{$zebra_yes_headLight};
				--zebraHeadHover: #{$zebra_yes_headHover};
				--zebraFootDark: #{$zebra_yes_footDark};
				--zebraFootLight: #{$zebra_yes_footLight};
				--zebraFootHover: #{$zebra_yes_footHover};
				--zebraRowsBorderColor: #{$zebra_yes_rowsBorderColor};
				--zebraColumnsBorderColor: #{$zebra_yes_columnsBorderColor};
			}
			&.noRow, 
			td.noCell {
				--zebraColor: #{$zebra_no_color};
				--zebraDark: #{$zebra_no_dark};
				--zebraLight: #{$zebra_no_light};
				--zebraHover: #{$zebra_no_hover};
				--zebraHeadDark: #{$zebra_no_headDark};
				--zebraHeadLight: #{$zebra_no_headLight};
				--zebraHeadHover: #{$zebra_no_headHover};
				--zebraFootDark: #{$zebra_no_footDark};
				--zebraFootLight: #{$zebra_no_footLight};
				--zebraFootHover: #{$zebra_no_footHover};
				--zebraRowsBorderColor: #{$zebra_no_rowsBorderColor};
				--zebraColumnsBorderColor: #{$zebra_no_columnsBorderColor};
			}
			&.alertRow, 
			td.alertCell {
				--zebraColor: #{$zebra_alert_color};
				--zebraDark: #{$zebra_alert_dark};
				--zebraLight: #{$zebra_alert_light};
				--zebraHover: #{$zebra_alert_hover};
				--zebraHeadDark: #{$zebra_alert_headDark};
				--zebraHeadLight: #{$zebra_alert_headLight};
				--zebraHeadHover: #{$zebra_alert_headHover};
				--zebraFootDark: #{$zebra_alert_footDark};
				--zebraFootLight: #{$zebra_alert_footLight};
				--zebraFootHover: #{$zebra_alert_footHover};
				--zebraRowsBorderColor: #{$zebra_alert_rowsBorderColor};
				--zebraColumnsBorderColor: #{$zebra_alert_columnsBorderColor};
			}
			&.observeRow, 
			td.observeCell {
				--zebraColor: #{$zebra_observe_color};
				--zebraDark: #{$zebra_observe_dark};
				--zebraLight: #{$zebra_observe_light};
				--zebraHover: #{$zebra_observe_hover};
				--zebraHeadDark: #{$zebra_observe_headDark};
				--zebraHeadLight: #{$zebra_observe_headLight};
				--zebraHeadHover: #{$zebra_observe_headHover};
				--zebraFootDark: #{$zebra_observe_footDark};
				--zebraFootLight: #{$zebra_observe_footLight};
				--zebraFootHover: #{$zebra_observe_footHover};
				--zebraRowsBorderColor: #{$zebra_observe_rowsBorderColor};
				--zebraColumnsBorderColor: #{$zebra_observe_columnsBorderColor};
			}
			&.voidRow, 
			td.voidCell {
				// void rows mostly inherit regualr rows, except for color and row-highlight background color
				--zebraColor: #{$zebra_void_color};
				--zebraColorHover: #{$zebra_void_colorHover};
				--zebraHover: #{$zebra_void_hover};
				--zebraHeadHover: #{$zebra_void_headHover};
				--zebraFootHover: #{$zebra_void_footHover};
			}

			// border color (rows & columns) within <tbody>
			border-color: var(--zebraRowsBorderColor);
			border-left-color: $border_outer;
			border-right-color: $border_outer;
			border-bottom-width: 0;
			
			&:last-child {
				border-bottom-width: 0;
			}

			// zebra stripe: common for both odd & even rows
			// could also be tr:nth-child(4n+1) == every fourth row, starting at row 1
			&:nth-of-type(odd), 
			&:nth-of-type(even) {
				td, 
				th, 
				.rhead, 
				.rfoot {
					border-style: solid;
					border-left-color: var(--zebraColumnsBorderColor);
					border-right-color: var(--zebraColumnsBorderColor);
				}

				&:not(.disableHighlight, .bodyGroupHead, .bodyGroupFoot):hover {
					td {
						background-color: var(--zebraHover);
					}
		
					th, 
					.rhead {
						background-color: var(--zebraHeadHover);
					}
		
					.rfoot {
						background-color: var(--zebraFootHover);
					}
				}
			}

			// zebra stripe : odd (darker)
			&:nth-of-type(odd) {
				td {
					background-color: var(--zebraDark);
				}
				
				th, 
				.rhead {
					background-color: var(--zebraHeadDark);
				}
				
				.rfoot {
					background-color: var(--zebraFootDark);
				}
			}

			// zebra stripe : even (lighter)
			&:nth-of-type(even) {
				td {
					background-color: var(--zebraLight);
				}

				th, 
				.rhead {
					background-color: var(--zebraHeadLight);
				}

				.rfoot {
					background-color: var(--zebraFootLight);
				}
			}

			
			/* 
			'faux' head and foot rows within <tbody> can give visual clues to tbody groups
			apply class to <tr class='bodyGroupHead'>
					example: 
						INVOICE TABLE
							thead for column headings
							tbody(s) for each school
								faux header row with school's name
								rows of invoices
								faux footer row with school's subtotal
							tfoot for GRAND TOTAL 
			*/
			&.bodyGroupHead, 
			&.bodyGroupHead:hover {
				background-color: $bodyGroupHead_BG;
				
				th, 
				td {
					background-color: transparent;
					border-bottom: $borderWidth solid $bodyGroupHead_border;
					
					&:is(th), 
					&.rhead {
						background-color: $bodyGroupHeadHead_BG;
					}
					&.rfoot {
						background-color: $bodyGroupHeadFoot_BG;
					}
				}
			}
			
			&.bodyGroupFoot, 
			&.bodyGroupFoot:hover {
				background-color: $bodyGroupFoot_BG;
				
				th, 
				td {
					background-color: transparent;
					border-top: $borderWidth solid $bodyGroupFoot_border;
					
					&:is(th), 
					&.rhead {
						background-color: $bodyGroupFootHead_BG;
					}
					
					&.rfoot {
						background-color: $bodyGroupFootFoot_BG;
					}
				}
			}
			
			
			// notes
			&.notes {
				border-top-color: $notes_border;
				color: $notes_color;
				
				td {
					background-color: $notes_BG;
					font-weight: normal;
					font-style: italic;
				}

				&:not(.disableHighlight):hover {
					td {
						background-color: $notes_BG_hover;
						color: $notes_color_hover;
					}
				}
			}
			
			
			&.voidRow {
				color: $zebra_void_color;
				text-decoration: line-through;
				
				td, 
				th {
					opacity: .4;
				}

				&:not(.disableHighlight):hover {
					color: $zebra_void_colorHover;
					
					td, 
					th {
						opacity: .85;
						color: $zebra_void_colorHover;
					}

					td {
						background-color: var(--zebraHover);
					}
	
					th, 
					.rhead {
						background-color: var(--zebraHeadHover);
					}
	
					.rfoot {
						background-color: var(--zebraFootHover);
					}
				}
			}
			
			
	
			// color-coding can also be applied at table cell (td/th) level
			th, 
			td {
				&.yesCell {
					color: $zebra_yes_color;
				}
				&.noCell {
					color: $zebra_no_color;
				}
				.alertCell {
					color: $zebra_alert_color;
				}
				.observeCell {
					color: $zebra_observe_color;
				}
			}

			&:nth-of-type(odd), 
			&:nth-of-type(even) {
				&:not(.disableHighlight, .bodyGroupHead, .bodyGroupFoot):hover {
					td {
						&.yesCell {
							background-color: $zebra_yes_hover;
						}
						&.noCell {
							background-color: $zebra_no_hover;
						}
						&.alertCell {
							background-color: $zebra_alert_hover;
						}
						&.observeCell {
							background-color: $zebra_observe_hover;
						}
						&.voidCell {
							background-color: $zebra_void_hover;
						}
					}
					
					th, 
					.rhead {
						&.yesCell {
							background-color: $zebra_yes_headHover;
						}
						&.noCell {
							background-color: $zebra_no_headHover;
						}
						&.alertCell {
							background-color: $zebra_alert_headHover;
						}
						&.observeCell {
							background-color: $zebra_observe_headHover;
						}
						&.voidCell {
							background-color: $zebra_void_headHover;
						}
					}
					
					.rfoot {
						&.yesCell {
							background-color: $zebra_yes_footHover;
						}
						&.noCell {
							background-color: $zebra_no_footHover;
						}
						&.alertCell {
							background-color: $zebra_alert_footHover;
						}
						&.observeCell {
							background-color: $zebra_observe_footHover;
						}
						&.voidCell {
							background-color: $zebra_void_footHover;
						}
					}
				}
			}

			// target cells of odd rows (darker)
			&:nth-of-type(odd) {
				td {
					&.yesCell {
						background-color: $zebra_yes_dark;
					}
					&.noCell {
						background-color: $zebra_no_dark;
					}
					.alertCell {
						background-color: $zebra_alert_dark;
					}
					.observeCell {
						background-color: $zebra_observe_dark;
					}
					.voidCell {
						background-color: $zebra_void_hover;
					}
				}

				th, 
				.rhead {
					&.yesCell {
						background-color: $zebra_yes_headDark;
					}
					&.noCell {
						background-color: $zebra_no_headDark;
					}
					.alertCell {
						background-color: $zebra_alert_headDark;
					}
					.observeCell {
						background-color: $zebra_observe_headDark;
					}
					.voidCell {
						background-color: $zebra_void_headHover;
					}
				}

				.rfoot {
					&.yesCell {
						background-color: $zebra_yes_footDark;
					}
					&.noCell {
						background-color: $zebra_no_footDark;
					}
					.alertCell {
						background-color: $zebra_alert_headDark;
					}
					.observeCell {
						background-color: $zebra_observe_headDark;
					}
					.voidCell {
						background-color: $zebra_void_footHover;
					}
				}
			}

			// target cells of even rows (lighter)
			&:nth-of-type(even) {
				td {
					&.yesCell {
						background-color: $zebra_yes_light;
					}
					&.noCell {
						background-color: $zebra_no_light;
					}
					.alertCell {
						background-color: $zebra_alert_light;
					}
					.observeCell {
						background-color: $zebra_observe_light;
					}
					.voidCell {
						background-color: $zebra_void_hover;
					}
				}

				th, 
				.rhead {
					&.yesCell {
						background-color: $zebra_yes_headLight;
					}
					&.noCell {
						background-color: $zebra_no_headLight;
					}
					.alertCell {
						background-color: $zebra_alert_headLight;
					}
					.observeCell {
						background-color: $zebra_observe_headLight;
					}
					.voidCell {
						background-color: $zebra_void_headHover;
					}
				}

				.rfoot {
					&.yesCell {
						background-color: $zebra_yes_footLight;
					}
					&.noCell {
						background-color: $zebra_no_footLight;
					}
					.alertCell {
						background-color: $zebra_alert_footLight;
					}
					.observeCell {
						background-color: $zebra_observe_footLight;
					}
					.voidCell {
						background-color: $zebra_void_footHover;
					}
				}
			}
		}
		
		// Darker line between multiple tbody 'sections' within one table
		&:nth-of-type(n+2) tr:first-of-type {
			td, 
			th {
				border-top-width: $borderWidth;
				border-top-color: $border_outer;
			}
		}
	}
	
	
	
	// table footer row(s)
	// use <tfoot> to group <tr><th>...</th></tr> and to get visual line at top of summary row(s)
	tfoot {
		background-color: $tfoot_BG; // tfoot background color
		border-top: $borderWidth solid $border_outer_tfoot; // tfoot top border
		
		tr {
			border-color: $border_inner_tfoot;
			border-left-color: $border_outer;
			border-right-color: $border_outer;
			
			td, 
			th {
				border-color: $border_inner_tfoot;
			}

			&:first-of-type {
				border-top: 0px solid transparent;
			}
			&:last-of-type {
				border-bottom: 0px solid transparent;
			}
			
			td {
				padding-right: $hPadding;
				font-weight: bold;
			}
		}
	}

	
	// grid class has borders on all sides
	&.grid {
		:is(thead, tbody, tfoot) {
			tr {
				border-bottom-width: 0;

				td, 
				th {
					// row borders are applied to TOP of each row
					// column borders are applied to RIGHT of each cell
					border-left-width: ($borderWidth * 0);
					border-right-width: $borderWidth;

					&:first-child {
						border-left-width: 0;
					}
					&:last-child {
						border-right-width: 0;
					}
				}
			}
		}

		:is(tr.bodyGroupHead) {
			td, 
			th {
				border-right-color: $blueTransition3;
			}
		}

		:is(tr.bodyGroupFoot) {
			td, 
			th {
				border-right-color: $lightBlue-1;
			}
		}
	}

	
	
	// left, center, right alignment cells
	.tdl, 
	.thl {
		text-align: left;
		padding-right: $hPadding;
	}
	
	.tdr, 
	.thr {
		text-align: right;
		padding-right: $hPadding;
	}
	
	.tdc, 
	.thc {
		text-align: center;
	}
	
	
	// regular rows padding
	tr {
		&>td:first-of-type, 
		&>th:first-of-type {
			padding-left: ($hPadding / 2);
		}
		
		&>td:last-of-type, 
		&>th:last-of-type {
			padding-right: $hPadding;
		}
	}
	
	
	// wideGutter tables have more padding between columns
	&.wideGutter {
		th, 
		td {
			padding-right: ($hPadding * 4);
		}
		.thl, 
		.tdl {
			padding-right: ($hPadding * 4);
		}
		.thc, 
		.tdc {
			padding-left: ($hPadding * 2);
			padding-right: ($hPadding * 2);
		}
		.thr, 
		.tdr {
			padding-left: ($hPadding * 4);
			padding-right: $hPadding;
		}
	}

	// disable wideGutter on specific cells by adding class noGutter
	// even though conceptually padding is set to "none" 0 looks too tight when text smashes against column borders
	th.noGutter, 
	td.noGutter {
		padding-right: ($hPadding / 2);
	}
	.thl.noGutter, 
	.tdl.noGutter {
		padding-right: ($hPadding / 2);
	}
	.thc.noGutter, 
	.tdc.noGutter {
		padding-left: ($hPadding / 2);
		padding-right: ($hPadding / 2);
	}
	.thr.noGutter, 
	.tdr.noGutter {
		padding-left: ($hPadding / 2);
		padding-right: ($hPadding / 2);
	}
	
	
	// class='padded' can be applied to individual cells or an entire row
	.padded, 
	.padded th, 
	.padded td {
		padding-top: .5em;
		padding-bottom: .5em;
	}
	
	
			
	// classes to add cell borders on left, right, or both (use class='borderLeft borderRight' for both)
	.borderLeft, 
	&.grid .borderLeft {
		border-left-width: $borderWidth;
	}
	.borderRight, 
	&.grid .borderRight {
		border-right-width: $borderWidth;
	}

	// classes to remove cell borders on left, right, or both (use class='borderLeft borderRight' for both)
	.noBorderTop, 
	&.grid .noBorderLeft {
		border-top-width: 0;
	}
	.noBorderLeft, 
	&.grid .noBorderLeft {
		border-left-width: 0;
	}
	.noBorderRight, 
	&.grid .noBorderRight {
		border-right-width: 0;
	}


	p {
		margin-bottom: ($gutter / 2);
	}

	&.noMargin {
		margin: 0;
	}
	&.noMarginTop {
		margin-top: 0;
	}
	&.noMarginBottom {
		margin-bottom: 0;
	}
}



// Vertical cell alignment
.top,		table.listing td.top,		table.listing th.top	{ vertical-align: top;}
.middle,	table.listing td.middle,	table.listing th.middle	{ vertical-align: middle;}
.bottom,	table.listing td.bottom,	table.listing th.bottom	{ vertical-align: bottom;}



@media screen {
	table.listing {
		a:hover {
			text-decoration: underline;
			color: $lightBlue;
			
			&.hiddenLink {
				color: inherit;
			}
		}
		
		// + - links (example: f3.php) are too close without this extra spacing
		.changeLink {
			margin-right: ($pxGutter / 4);
		}
	}
}



@media print {
	table.listing {
		tbody {
			tr {
				// all zebra stripe rows print in black
				&.yesRow:nth-of-type(odd), 
				&.yesRow:nth-of-type(even), 
				&.noRow:nth-of-type(odd), 
				&.noRow:nth-of-type(even), 
				&.alertRow:nth-of-type(odd), 
				&.alertRow:nth-of-type(even), 
				&.observeRow:nth-of-type(odd), 
				&.observeRow:nth-of-type(even) {
					color: $black;
				}
				&.voidRow {
					color: $greyTextPrint;
				}
				
				&.notes {
					color: $notes_color_hover;
					background-color: $notes_BG_hover;
				}
			}
		}

		// disable wideGutter when printing
		&.wideGutter {
			th, 
			td {
				padding-right: 0;
			}
			.thl, 
			.tdl {
				padding-right: 0;
			}
			.thc, 
			.tdc {
				padding-left: 0;
				padding-right: 0;
			}
			.thr, 
			.tdr {
				padding-left: 0;
				padding-right: 0;
			}
		}
	}
}
